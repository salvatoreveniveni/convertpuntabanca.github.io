{"version":3,"sources":["content/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","useState","punta","setPunta","quotaBanca","setQuotaBanca","percentuale","setPercentuale","Container","style","marginTop","Row","Col","Label","Input","type","name","value","onChange","ev","preventDefault","e","a","target","replace","setInput","className","setInputPercentuale","readOnly","Button","color","onClick","percentual","finalValue","toFixed","calcola","App","accept","setAccept","console","info","window","location","href","ReactGA","initialize","pageview","buttonText","onAccept","acceptedByScrolling","declineButtonText","cookieName","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAqFeA,EAnFD,WAAO,IAAD,EACSC,mBAAS,GADlB,mBACTC,EADS,KACHC,EADG,OAEmBF,mBAAS,GAF5B,mBAETG,EAFS,KAEEC,EAFF,OAGqBJ,mBAAS,GAH9B,mBAGTK,EAHS,KAGGC,EAHH,KA6BpB,OACI,oCACE,kBAACC,EAAA,EAAD,CAAWC,MAAO,CAACC,UAAU,OAC3B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,KAAK,aACLC,MAAOf,EACPgB,SAAY,SAAAC,GAAOA,EAAGC,iBAlCf,SAACC,GACd,IAAIC,EAAID,EAAEE,OAAON,MACjBd,EAASmB,EAAEE,QAAQ,IAAI,MAgCsBC,CAASN,OAGpD,kBAACP,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CACEY,UAAU,QACVV,KAAK,aACLC,MAAOX,EACPY,SAAU,SAAAC,GAAOA,EAAGC,iBAtCA,SAACC,GAC3B,IAAIC,EAAID,EAAEE,OAAON,MACjBV,EAAee,EAAEE,QAAQ,IAAI,MAoCcG,CAAoBR,QAI7D,kBAACR,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEa,UAAY,cADd,eAGA,kBAACZ,EAAA,EAAD,CACEC,KAAK,OACLW,UAAU,aACVT,MAAOb,EACPwB,UAAQ,MAId,kBAACjB,EAAA,EAAD,KACE,yBAAKe,UAAU,kBACb,kBAACG,EAAA,EAAD,CAAQC,MAAM,UACZC,QAAS,SAAAZ,GAAMA,EAAGC,iBArDZ,WACd,IACMH,EAAQf,GADSA,EAAM,GAEvB8B,EAAa1B,EAAY,IAGzB2B,GAAchB,GAFIA,EAAMe,EACaA,GAAYE,QAAQ,IACpBA,QAAQ,GACnD7B,EAAc4B,GA8C6BE,KADrC,WADF,QAKE,kBAACN,EAAA,EAAD,CAAQC,MAAM,SACZC,QAAS,SAAAZ,GAAMA,EAAGC,iBA/C1BjB,EAAS,GACTI,EAAe,GACfF,EAAc,KA4CR,c,8BCvCG+B,MA3Bf,WAAgB,IAAD,EACcnC,mBAAS,KADvB,mBACNoC,EADM,KACCC,EADD,KAEb,GAAc,MAAXD,EAAgB,CACjBE,QAAQC,KAAK,IAAIC,OAAOC,SAASC,MAEjCC,IAAQC,WADW,kBAEnBD,IAAQE,SAASL,OAAOC,SAASC,MAEnC,OACE,oCACE,kBAAC,IAAD,CACED,SAAS,SACTK,WAAW,SACXC,SAAU,YAA6B,EAA1BC,oBACTX,EAAU,MAGdY,kBAAkB,UAClBC,WAAW,gCARb,2CAYA,kBAAC,EAAD,QCjBcC,QACW,cAA7BX,OAAOC,SAASW,UAEe,UAA7BZ,OAAOC,SAASW,UAEhBZ,OAAOC,SAASW,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.221bbf8b.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport { Container, Row, Label, Input,Col, Button } from 'reactstrap';\nconst Table = () => {\n    const [punta,setPunta] = useState(0);\n    const [quotaBanca,setQuotaBanca] = useState(0);\n    const [percentuale,setPercentuale] = useState(5);\n  \n    const setInput = (e) => {\n        var a = e.target.value;\n        setPunta(a.replace(',','.'));\n        //calcola(a.replace(',','.'));\n    };\n    const setInputPercentuale = (e) => {\n      var a = e.target.value;\n      setPercentuale(a.replace(',','.'));\n      //calcola(a.replace(',','.'));\n  };\n    const calcola = () =>{\n      const puntaSottratto = punta-1;\n      const value = punta/puntaSottratto;\n      const percentual = percentuale/100;\n      const percentualValue = value*percentual;\n      const finalPercentual = (percentualValue - percentual).toFixed(2);\n      const finalValue = (value-finalPercentual).toFixed(2);\n      setQuotaBanca(finalValue); \n    };\n    const reset = () =>{\n      setPunta(0);\n      setPercentuale(5);\n      setQuotaBanca(0);\n    }\nreturn (\n    <>\n      <Container style={{marginTop:'2%'}}>\n        <Row>\n          <Col>\n            <Label>Quota Punta</Label>\n            <Input\n              type='text'\n              name='inputPunta'\n              value={punta}\n              onChange = {ev => {ev.preventDefault();setInput(ev);}}\n           />\n          </Col>\n          <Col>\n          <Label>Percentuale</Label>\n          <Input\n            className='input'\n            name='inputPunta'\n            value={percentuale}\n            onChange={ev => {ev.preventDefault();setInputPercentuale(ev);}}\n          />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Label\n              className = 'labelQuota'\n            >Quota Banca</Label>\n            <Input\n              type='text'\n              className='inputBanca'\n              value={quotaBanca}\n              readOnly\n            />\n          </Col>\n        </Row>\n        <Row  >\n          <div className=\"button-calcola\">\n            <Button color=\"primary\" \n              onClick={ev =>{ev.preventDefault();calcola();}}>\n              Calcola\n            </Button> &nbsp;\n            <Button color=\"danger\" \n              onClick={ev =>{ev.preventDefault();reset();}}>\n              Reset\n            </Button>\n          </div>\n        </Row>\n      </Container>\n    </>\n);\n\n};\n\nexport default Table;","import React, { useState } from 'react';\nimport Table from './content/Table';\nimport CookieConsent from 'react-cookie-consent';\nimport ReactGA from 'react-ga';\n\nimport './App.css';\n\nfunction App() {\n  const [accept,setAccept] = useState('N');\n  if(accept !== 'N') {\n    console.info('A',window.location.href);\n    const trackingId = \"UA-178891577-1\";\n    ReactGA.initialize(trackingId);\n    ReactGA.pageview(window.location.href);\n  }\n  return (\n    <>\n      <CookieConsent\n        location=\"bottom\"\n        buttonText=\"Accept\"\n        onAccept={({ acceptedByScrolling }) => {\n            setAccept('Y'); \n        }}\n        //enableDeclineButton flipButtons\n        declineButtonText=\"Decline\"\n        cookieName=\"gatsby-gdpr-google-analytics\"\n      >\n      This site uses cookies google analytics \n      </CookieConsent>\n      <Table />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}