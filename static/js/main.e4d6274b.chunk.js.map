{"version":3,"sources":["content/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["Table","useState","punta","setPunta","quotaBanca","setQuotaBanca","percentuale","calcola","props","console","info","value","percentual","finalValue","toFixed","Container","style","marginTop","Row","Col","Label","Input","type","name","onChange","ev","preventDefault","e","a","target","replace","setInput","placeholder","className","defaultValue","readOnly","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OAkEeA,EAhED,WAAO,IAAD,EACSC,qBADT,mBACTC,EADS,KACHC,EADG,OAEmBF,mBAAS,GAF5B,mBAETG,EAFS,KAEEC,EAFF,OAGMJ,mBAAS,GAAxBK,EAHS,oBAWVC,EAAU,SAACC,GACbC,QAAQC,KAAK,IAAIF,GACnB,IACMG,EAAQH,GADSA,EAAM,GAEvBI,EAAaN,EAAY,IAGzBO,GAAcF,GAFIA,EAAMC,EACaA,GAAYE,QAAQ,IACpBA,QAAQ,GACnDT,EAAcQ,IAEpB,OACI,oCACK,kBAACE,EAAA,EAAD,CAAWC,MAAO,CAACC,UAAU,OAC9B,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CACEC,KAAK,OACLC,KAAK,aACLZ,MAAOT,EACPsB,SAAY,SAAAC,GAAOA,EAAGC,iBA1Bf,SAACC,GACd,IAAIC,EAAID,EAAEE,OAAOlB,MACjBR,EAASyB,EAAEE,QAAQ,IAAI,MACvBvB,EAAQqB,EAAEE,QAAQ,IAAI,MAuBuBC,CAASN,IAChDO,YAAc,OAGlB,kBAACb,EAAA,EAAD,KACA,kBAACC,EAAA,EAAD,oBACA,kBAACC,EAAA,EAAD,CACEY,UAAU,QACVV,KAAK,aACLW,aAAc5B,EACd6B,UAAQ,MAIZ,kBAACjB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEa,UAAY,cADd,eAGA,kBAACZ,EAAA,EAAD,CACEC,KAAK,OACLW,UAAU,aACVtB,MAAOP,EACP+B,UAAQ,S,MCvCPC,MAZf,WAEE,OACE,oCAEA,kBAAC,EAAD,QCEgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.e4d6274b.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport { Container, Row, Label, Input,Col } from 'reactstrap';\nconst Table = () => {\n    const [punta,setPunta] = useState();\n    const [quotaBanca,setQuotaBanca] = useState(0);\n    const [percentuale] = useState(5);\n  \n    const setInput = (e) => {\n        var a = e.target.value;\n        setPunta(a.replace(',','.'));\n        calcola(a.replace(',','.'));\n    };\n\n    const calcola = (props) =>{\n        console.info('a',props);\n      const puntaSottratto = props-1;\n      const value = props/puntaSottratto;\n      const percentual = percentuale/100;\n      const percentualValue = value*percentual;\n      const finalPercentual = (percentualValue - percentual).toFixed(2);\n      const finalValue = (value-finalPercentual).toFixed(2);\n      setQuotaBanca(finalValue); \n    };\nreturn (\n    <>\n         <Container style={{marginTop:'2%'}}>\n        <Row>\n          <Col>\n            <Label>Quota Punta</Label>\n            <Input\n              type='text'\n              name='inputPunta'\n              value={punta}\n              onChange = {ev => {ev.preventDefault();setInput(ev);}}\n              placeholder = '0'\n           />\n          </Col>\n          <Col>\n          <Label>Percentuale</Label>\n          <Input\n            className='input'\n            name='inputPunta'\n            defaultValue={percentuale}\n            readOnly\n          />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <Label\n              className = 'labelQuota'\n            >Quota Banca</Label>\n            <Input\n              type='text'\n              className='inputBanca'\n              value={quotaBanca}\n              readOnly\n            />\n          </Col>\n        </Row>\n      </Container>\n    </>\n);\n\n};\n\nexport default Table;","import React from 'react';\nimport Table from './content/Table';\n\nimport './App.css';\n\nfunction App() {\n \n  return (\n    <>\n\n    <Table />\n    \n    </>\n    \n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}